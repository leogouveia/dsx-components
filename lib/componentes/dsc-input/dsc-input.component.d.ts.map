{"version":3,"file":"dsc-input.component.d.ts","sources":["dsc-input.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { tamanhoInputType, tipoTextoFeedBackType } from '../../types/inputTypes';\nimport { TamanhoInputEnum } from '../../enum/inputEnums';\nexport declare class DscInputComponent implements OnInit, OnChanges, AfterViewInit, ControlValueAccessor {\n    controlDir: NgControl;\n    dscRotulo?: string;\n    dscRotulo_?: string;\n    dscInformacaoAdicional?: string;\n    dscInformacaoAdicional_?: string;\n    dscIconeInformativo?: string;\n    dscIconeInformativo_?: string;\n    dscIconLeft?: string;\n    dscIconLeft_?: string;\n    dscPlaceholder: string;\n    dscPlaceholder_: string;\n    dscIsClearButton?: boolean;\n    dscIsClearButton_: boolean;\n    dscTipoTextoFeedBack?: tipoTextoFeedBackType;\n    dscTipoTextoFeedBack_: tipoTextoFeedBackType;\n    dscTextoFeedBack?: string;\n    dscTextoFeedBack_: string;\n    dscTextoComplementar?: string;\n    dscTextoComplementar_?: string;\n    dscIsContadorCaractere?: boolean;\n    dscIsContadorCaractere_: boolean;\n    dscTamanhoMaximo?: number;\n    dscTamanhoMaximo_: number;\n    dscMask?: any;\n    dscMask_: any;\n    dscIsPassword?: boolean;\n    dscIsPassword_: boolean;\n    dscVoice?: boolean;\n    dscVoice_: boolean;\n    dscTipoTamanhoInput: tamanhoInputType;\n    dscTipoTamanhoInput_: TamanhoInputEnum;\n    dscEventEnter: EventEmitter<void>;\n    input: ElementRef;\n    classeBox: string;\n    arrayType: string[];\n    iconeFeedBack: string;\n    mapaClasseIcone: Map<string, string>;\n    typeDomInput: string;\n    showMicIcon: boolean;\n    mapaTamanhoInput: Map<TamanhoInputEnum, string>;\n    mapaHeader: Map<TamanhoInputEnum, string>;\n    classeHeader: string;\n    classFormField: string;\n    classComplementar: string;\n    stackSuffix: any[];\n    disabled: boolean;\n    onChange: (_value: any) => void;\n    onTouched: () => void;\n    constructor(controlDir: NgControl);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    registerOnChange(fn: (value: any) => void): void;\n    setDisabledState(disabled: boolean): void;\n    writeValue(value: any): void;\n    registerOnTouched(fn: () => void): void;\n    aplicarClasseFeedBack(): void;\n    aplicarClasseComplementar(): void;\n    aplicarClasseMatFormField(): void;\n    limparInput(): void;\n    inicializarMapaIconeFeedback(): void;\n    private aplicarMascara;\n    private limparMascara;\n    private validarPassword;\n    private configurarInputMask;\n    escutarTeclas($event: KeyboardEvent): void;\n    private tratarMicrofone;\n    private hideMic;\n    private showMic;\n    validarSuffix(): void;\n    retornarSuffixMarcado(): void;\n    inicializarMapaTamanhoInput(): void;\n    inicializarMapaHeader(): void;\n    mudarClasseParaMic(): void;\n    isInvalid(): boolean;\n    private tratarClasseMatFormFieldClearButton;\n}\n"]}